import type { PropType } from 'vue';
import type { ViewCard } from '../types/waterfall';
declare const _default: import("vue").DefineComponent<{
    list: {
        type: PropType<ViewCard[]>;
        default: () => never[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
    };
    imgSelector: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    breakpoints: {
        type: ObjectConstructor;
        default: () => {
            1200: {
                rowPerView: number;
            };
            800: {
                rowPerView: number;
            };
            500: {
                rowPerView: number;
            };
        };
    };
    gutter: {
        type: NumberConstructor;
        default: number;
    };
    hasAroundGutter: {
        type: BooleanConstructor;
        default: boolean;
    };
    animationPrefix: {
        type: StringConstructor;
        default: string;
    };
    animationEffect: {
        type: StringConstructor;
        default: string;
    };
    animationDuration: {
        type: NumberConstructor;
        default: number;
    };
    animationDelay: {
        type: NumberConstructor;
        default: number;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    lazyload: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadProps: {
        type: ObjectConstructor;
        default: () => void;
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
}, {
    waterfallWrapper: import("vue").Ref<import("../types/util").Nullable<HTMLElement>>;
    wrapperHeight: import("vue").Ref<number>;
    getRenderURL: (item: ViewCard) => string;
    getKey: (item: ViewCard, index: number) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    list: {
        type: PropType<ViewCard[]>;
        default: () => never[];
    };
    rowKey: {
        type: StringConstructor;
        default: string;
    };
    imgSelector: {
        type: StringConstructor;
        default: string;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    breakpoints: {
        type: ObjectConstructor;
        default: () => {
            1200: {
                rowPerView: number;
            };
            800: {
                rowPerView: number;
            };
            500: {
                rowPerView: number;
            };
        };
    };
    gutter: {
        type: NumberConstructor;
        default: number;
    };
    hasAroundGutter: {
        type: BooleanConstructor;
        default: boolean;
    };
    animationPrefix: {
        type: StringConstructor;
        default: string;
    };
    animationEffect: {
        type: StringConstructor;
        default: string;
    };
    animationDuration: {
        type: NumberConstructor;
        default: number;
    };
    animationDelay: {
        type: NumberConstructor;
        default: number;
    };
    backgroundColor: {
        type: StringConstructor;
        default: string;
    };
    lazyload: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadProps: {
        type: ObjectConstructor;
        default: () => void;
    };
    delay: {
        type: NumberConstructor;
        default: number;
    };
}>>, {
    breakpoints: Record<string, any>;
    gutter: number;
    hasAroundGutter: boolean;
    width: number;
    animationDelay: number;
    animationDuration: number;
    backgroundColor: string;
    list: ViewCard[];
    rowKey: string;
    imgSelector: string;
    animationPrefix: string;
    animationEffect: string;
    lazyload: boolean;
    loadProps: Record<string, any>;
    delay: number;
}>;
export default _default;
